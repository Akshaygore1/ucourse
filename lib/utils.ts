import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatTime(time: number) {
  const minutes = Math.floor(time / 60);
  const seconds = time % 60;
  const hours = Math.floor(minutes / 60);
  const minutesFormatted = minutes % 60;
  const secondsFormatted = seconds < 10 ? "0" : "";
  return `${hours}:${
    minutesFormatted < 10 ? "0" : ""
  }${minutesFormatted}:${secondsFormatted}${seconds}`;
}

export async function getVideoInfo(id: string, options = { chapters: true }) {
  const json = await getJSONFromHTML(`https://www.youtube.com/watch?v=${id}`);
  let result: any = { id };
  // Get total duration
  result.title =
    json.contents.twoColumnWatchNextResults.results.results.contents[0].videoPrimaryInfoRenderer.title.runs[0].text;

  result.duration =
    json.frameworkUpdates.entityBatchUpdate.mutations[0].payload
      .macroMarkersListEntity.markersList.markers[0].durationMillis / 10;

  if (options.chapters) {
    let chapters = [];
    let areAutoGenerated = false;

    const engagementPanel = json.engagementPanels?.find(
      (panel: any) =>
        panel.engagementPanelSectionListRenderer?.content
          ?.macroMarkersListRenderer
    );

    const contents =
      engagementPanel?.engagementPanelSectionListRenderer?.content
        ?.macroMarkersListRenderer?.contents;

    if (contents) {
      areAutoGenerated = "macroMarkersInfoItemRenderer" in contents[0];
      const relevantContents = contents.slice(areAutoGenerated ? 1 : 0);

      chapters = relevantContents.map((chapter: any) => {
        const chapterData = chapter.macroMarkersListItemRenderer;
        const timeInt = getIntFromDuration(
          chapterData.timeDescription.simpleText
        );

        return {
          title: chapterData.title.simpleText,
          time: timeInt,
        };
      });
    }
    result.chapters = {
      areAutoGenerated,
      chapters,
    };
  }
  return result;
}

// Helper Functions

async function getJSONFromHTML(url: string) {
  const response = await fetch(url, { cache: "no-store" });
  const html = await response.text();
  const scriptContent = extractScriptContent(html, "ytInitialData");
  return JSON.parse(scriptContent);
}

function getIntFromDuration(timeStr: string) {
  const isNegative = timeStr[0] === "-";
  if (isNegative) {
    timeStr = timeStr.slice(1);
  }

  const timeParts = timeStr.split(":").map((part) => parseInt(part, 10));
  let seconds = 0;

  switch (timeParts.length) {
    case 3: // hours:minutes:seconds
      seconds = timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];
      break;
    case 2: // minutes:seconds
      seconds = timeParts[0] * 60 + timeParts[1];
      break;
    case 1: // seconds
      seconds = timeParts[0];
      break;
    default:
      throw new Error("Invalid time format");
  }

  return isNegative ? -seconds : seconds;
}

export function extractScriptContent(html: string, variableName: string) {
  const regex = new RegExp(`var ${variableName} = (.+?);<\/script>`);
  const match = html.match(regex);
  if (match && match[1]) {
    return match[1];
  }
  throw new Error("Could not find script data");
}

export async function getPlaylistDetails(playlistId: string, apiKey: string) {
  console.log("Fetching playlist details for ID:", playlistId);
  try {
    const encodedId = encodeURIComponent(playlistId);
    const url = `https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${encodedId}&key=${apiKey}`;

    console.log("Fetching playlist details from URL:", url);
    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (!data.items || data.items.length === 0) {
      throw new Error("Playlist not found");
    }

    const playlist = data.items[0];
    return {
      id: playlist.id,
      title: playlist.snippet.title,
    };
  } catch (error) {
    console.error("Error fetching playlist details:", error);
    throw new Error(`Failed to fetch playlist details: ${error}`);
  }
}

export async function getPlaylistInfo(
  playlistId: string,
  apiKey: string,
  pageToken: string = ""
) {
  console.log("Fetching playlist info for ID:", playlistId);
  try {
    // Fetch playlist details
    const playlistDetails = await getPlaylistDetails(playlistId, apiKey);

    // Fetch playlist items
    const encodedId = encodeURIComponent(playlistId);
    const itemsUrl = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${encodedId}&key=${apiKey}${
      pageToken ? `&pageToken=${pageToken}` : ""
    }`;

    console.log("Fetching playlist items from URL:", itemsUrl);
    const itemsResponse = await fetch(itemsUrl);

    if (!itemsResponse.ok) {
      throw new Error(`HTTP error! status: ${itemsResponse.status}`);
    }

    const itemsData = await itemsResponse.json();
    if (!itemsData.items || itemsData.items.length === 0) {
      throw new Error("No items found in playlist");
    }

    const items = itemsData.items.map((item: any) => {
      return {
        id: item.snippet.resourceId.videoId,
        title: item.snippet.title,
        isCompleted: false,
      };
    });
    return {
      playlistDetails,
      items,
      nextPageToken: itemsData.nextPageToken,
      totalResults: itemsData.pageInfo.totalResults,
    };
  } catch (error) {
    console.error("Error fetching playlist info:", error);
    throw new Error(`Failed to fetch playlist info: ${error}`);
  }
}
export function convertSecondsToHours(seconds: number) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;
  return `${hours}:${minutes < 10 ? "0" : ""}${minutes}:${
    remainingSeconds < 10 ? "0" : ""
  }${remainingSeconds}`;
}
